(function(){ const btn = document.getElementById('theme'); const KEY='theme'; const saved=localStorage.getItem(KEY); if(saved){ document.documentElement.dataset.theme=saved; btn.setAttribute('aria-pressed', saved==='dark'); } btn.addEventListener('click', ()=>{ const next=(document.documentElement.dataset.theme==='dark')?'light':'dark'; document.documentElement.dataset.theme=next; localStorage.setItem(KEY,next); btn.setAttribute('aria-pressed', next==='dark'); }); })(); 

(function(){ const el = document.getElementById('typing'); const base = "I build fast, clean web interfaces."; const alts = [ "I ship landing pages in 24–48h.", "I craft accessible, mobile-first UIs.", "I integrate APIs & contact forms." ]; let j=0, erase=false, altIndex=0; function tick(){ const target = (altIndex===0)?base:alts[altIndex-1]; j += erase ? -1 : 1; el.textContent = target.slice(0, j); if(j===target.length){ erase=true; setTimeout(tick,1200); return;} if(j===0){ erase=false; altIndex=(altIndex+1)%(alts.length+1); } setTimeout(tick, erase?40:45); } setTimeout(tick, 800); })(); 

const io = new IntersectionObserver((entries)=>{ entries.forEach(e=>{ if(e.isIntersecting){ e.target.classList.add('revealed'); io.unobserve(e.target);} }) },{threshold:.15}); 
document.querySelectorAll('.reveal').forEach(el=>io.observe(el)); 

const filterButtons = document.querySelectorAll('.filter .btn'); 
const cards = document.querySelectorAll('.cards .card'); 
filterButtons.forEach(btn=>{ btn.addEventListener('click', ()=>{ filterButtons.forEach(b=>b.setAttribute('aria-pressed','false')); btn.setAttribute('aria-pressed','true'); const f = btn.dataset.filter; cards.forEach(c=>{ const tags = (c.dataset.tags||'').split(' '); const show = (f==='all') || tags.includes(f); c.style.display = show ? '' : 'none'; }); }); }); 

const projects = { 
  lp: { 
    title:"Local Business Landing Page", 
    meta:"HTML • CSS Grid • Formspree", 
    body:`<p>Rebuilt layout with modern CSS Grid, optimized images (WebP), delivered a11y-friendly form. Lighthouse 89+, 2-day turnaround.</p> <ul class="list-clean"><li>Responsive layout & lazy images</li><li>Form validation & ARIA</li><li>Netlify deploy, custom domain</li></ul>` 
  }, 
  tracker: { 
    title:"Crypto Price Tracker", 
    meta:"JS fetch • Public API • Dark mode", 
    body:`<p>Fetches prices every 5s, graceful fallback if API rate-limits. Minimal footprint.</p> <ul class="list-clean"><li>Debounced updates & error states</li><li>Dark/light mode sync</li><li>Readable, commented code</li></ul>` 
  }, 
  form: { 
    title:"Accessible Form Validation", 
    meta:"Vanilla JS • ARIA labels • A11y", 
    body:`<p>Client-side validation with screen-reader friendly errors and clear focus rings.</p> <ul class="list-clean"><li>No dependencies</li><li>WCAG contrast & focus</li><li>0 issues in audit</li></ul>` 
  } 
}; 

const backdrop = document.getElementById('backdrop'); 
const modalTitle = document.getElementById('modalTitle'); 
const modalMeta = document.getElementById('modalMeta'); 
const modalBody = document.getElementById('modalBody'); 
document.querySelectorAll('.open-modal').forEach(a=>{ 
  a.addEventListener('click',(e)=>{ 
    e.preventDefault(); 
    const id = a.dataset.project; 
    const p = projects[id]; 
    modalTitle.textContent = p.title; 
    modalMeta.textContent = p.meta; 
    modalBody.innerHTML = p.body; 
    backdrop.style.display='grid'; 
    document.getElementById('closeModal').focus(); 
  }); 
}); 
document.getElementById('closeModal').addEventListener('click', ()=>backdrop.style.display='none'); 
backdrop.addEventListener('click',(e)=>{ if(e.target===backdrop){ backdrop.style.display='none'; }}); 

const toast = document.getElementById('toast'); 
document.getElementById('copyMail').addEventListener('click', async (e)=>{ 
  const mail = e.currentTarget.dataset.mail; 
  try{ await navigator.clipboard.writeText(mail); toast.textContent='Email copied: '+mail; } 
  catch{ toast.textContent='Copy failed. Long-press to copy.'; } 
  toast.classList.add('show'); 
  setTimeout(()=>toast.classList.remove('show'),1600); 
}); 

const toTop = document.getElementById('toTop'); 
toTop.addEventListener('click', ()=>window.scrollTo({top:0,behavior:'smooth'})); 
window.addEventListener('scroll', ()=>{ 
  const doc = document.documentElement; 
  const scrolled = (doc.scrollTop)/(doc.scrollHeight-doc.clientHeight); 
  document.getElementById('progress').style.width = (scrolled*100)+'%'; 
  toTop.style.opacity = (doc.scrollTop>300)?1:0; 
}); 

(function(){ 
  const KEY='accent'; 
  const saved = JSON.parse(localStorage.getItem(KEY) || 'null'); 
  if(saved){ 
    document.documentElement.style.setProperty('--accent', saved.a); 
    document.documentElement.style.setProperty('--accent-2', saved.b); 
  } 
  document.querySelectorAll('.accent-dot').forEach(btn=>{ 
    btn.addEventListener('click', ()=>{ 
      const a = btn.dataset.accent, b = btn.dataset.accent2; 
      document.documentElement.style.setProperty('--accent', a); 
      document.documentElement.style.setProperty('--accent-2', b); 
      localStorage.setItem(KEY, JSON.stringify({a,b})); 
    }); 
  }); 
})(); 

(function(){ 
  const bars = document.querySelectorAll('.bar > span'); 
  const obs = new IntersectionObserver((entries)=>{ 
    entries.forEach(e=>{ 
      if(e.isIntersecting){ 
        const p = e.target.getAttribute('data-p') || 0; 
        e.target.style.width = p + '%'; 
        obs.unobserve(e.target); 
      } 
    }); 
  }, {threshold:.35}); 
  bars.forEach(b=>obs.observe(b)); 
})(); 

(function(){ 
  if (window.matchMedia && window.matchMedia('(pointer: coarse)').matches) return; 
  const cards = document.querySelectorAll('.cards .card'); 
  cards.forEach(card=>{ 
    card.style.transformStyle='preserve-3d'; 
    card.addEventListener('mousemove', (e)=>{ 
      const r = card.getBoundingClientRect(); 
      const x = (e.clientX - r.left)/r.width - .5; 
      const y = (e.clientY - r.top)/r.height - .5; 
      card.style.transform = `rotateY(${x*6}deg) rotateX(${-y*6}deg) translateY(0)`; 
    }); 
    card.addEventListener('mouseleave', ()=>{ card.style.transform='translateY(0)'; }); 
  }); 
})(); 

(function(){ 
  const root = document.getElementById('tracker'); 
  if(!root) return; 
  const API = 'https://api.coingecko.com/api/v3/simple/price' + '?ids=bitcoin,ethereum,solana&vs_currencies=usd&include_24hr_change=true'; 
  const STORAGE_KEY = 'tracker:last'; 
  const POLL_MS = 5000; 
  const rows = Array.from(root.querySelectorAll('.trow')).map(r=>({ el: r, id: r.dataset.coin, sym: r.dataset.sym, priceEl: r.querySelector('[data-field="price"]'), changeEl: r.querySelector('[data-field="change"]'), canvas: r.querySelector('[data-field="spark"]'), history: [] })); 
  const dot = document.getElementById('netDot'); 
  const netText = document.getElementById('netText'); 
  const fmtPrice = (n)=> n>=1000 ? '$' + n.toLocaleString('en-US',{maximumFractionDigits:0}) : '$' + n.toLocaleString('en-US',{maximumFractionDigits:2}); 
  const fmtChange = (n)=> (n>0? '+':'') + n.toFixed(2) + '%'; 
  function setStatus(online){ 
    if(online){ 
      dot.classList.remove('dot-offline'); 
      dot.classList.add('dot-online'); 
      netText.textContent='Live • updated ' + new Date().toLocaleTimeString(); 
    } else{ 
      dot.classList.remove('dot-online'); 
      dot.classList.add('dot-offline'); 
      netText.textContent='Offline • showing last saved data'; 
    } 
  } 
  function tweenNumber(el, from, to, fmt, pulseClass){ 
    const start = performance.now(), D=420; 
    function step(t){ 
      const k = Math.min(1,(t-start)/D); 
      const v = from + (to-from)*(0.5 - 0.5*Math.cos(Math.PI*k)); 
      el.textContent = fmt(v); 
      if(k<1) requestAnimationFrame(step); 
    } 
    requestAnimationFrame(step); 
    el.classList.remove('pulse-up','pulse-down'); 
    if(pulseClass){ el.classList.add(pulseClass); setTimeout(()=>el.classList.remove(pulseClass),450); } 
  } 
  function drawSpark(canvas, history){ 
    const ctx = canvas.getContext('2d'); 
    const dpr = window.devicePixelRatio || 1; 
    const rect = canvas.getBoundingClientRect(); 
    canvas.width = Math.max(1, Math.round(rect.width * dpr)); 
    canvas.height = Math.max(1, Math.round(rect.height * dpr)); 
    const cw = rect.width, ch = rect.height; 
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0); 
    ctx.clearRect(0, 0, cw, ch); 
    if(history.length < 2) return; 
    const min = Math.min(...history), max = Math.max(...history); 
    const pad = 0.08 * (max - min || 1); 
    const lo = min - pad, hi = max + pad; 
    ctx.lineWidth = 2; 
    ctx.lineJoin='round'; 
    ctx.miterLimit=1; 
    const styles = getComputedStyle(document.documentElement); 
    const grad = ctx.createLinearGradient(0, 0, cw, 0); 
    grad.addColorStop(0, styles.getPropertyValue('--accent').trim()); 
    grad.addColorStop(1, styles.getPropertyValue('--accent-2').trim()); 
    ctx.strokeStyle = grad; 
    ctx.beginPath(); 
    history.forEach((val,i)=>{ 
      const x = (i/(history.length-1))*cw; 
      const y = ch - ((val - lo)/(hi - lo))*ch; 
      i ? ctx.lineTo(x,y) : ctx.moveTo(x,y); 
    }); 
    ctx.stroke(); 
    const under = ctx.createLinearGradient(0, 0, 0, ch); 
    under.addColorStop(0,'rgba(34,211,238,.20)'); 
    under.addColorStop(1,'rgba(34,211,238,0)'); 
    ctx.fillStyle = under; 
    ctx.lineTo(cw, ch); 
    ctx.lineTo(0, ch); 
    ctx.closePath(); 
    ctx.fill(); 
  } 
  function paintAll(data, online){ 
    setStatus(online); 
    rows.forEach(row=>{ 
      const d = data[row.id]; 
      if(!d) return; 
      const nextPrice = d.usd; 
      const nextChange = d.usd_24h_change; 
      row.priceEl.querySelector('.skel')?.remove(); 
      row.changeEl.querySelector('.skel')?.remove(); 
      const prevText = row.priceEl.dataset.prev; 
      const prev = prevText? parseFloat(prevText) : nextPrice; 
      const pulse = (nextPrice>=prev) ? 'pulse-up' : 'pulse-down'; 
      tweenNumber(row.priceEl, prev, nextPrice, fmtPrice, pulse); 
      row.priceEl.dataset.prev = nextPrice; 
      row.changeEl.textContent = fmtChange(nextChange); 
      row.changeEl.classList.toggle('up', nextChange>=0); 
      row.changeEl.classList.toggle('down', nextChange<0); 
      row.history.push(nextPrice); 
      if(row.history.length>60) row.history.shift(); 
      drawSpark(row.canvas, row.history); 
    }); 
  } 
  async function fetchJSON(url, ms=4500){ 
    const ctl = new AbortController(), t = setTimeout(()=>ctl.abort(), ms); 
    try{ 
      const res = await fetch(url,{signal:ctl.signal, cache:'no-store'}); 
      if(!res.ok) throw new Error('HTTP '+res.status); 
      return await res.json(); 
    } finally { clearTimeout(t); } 
  } 
  async function poll(){ 
    try{ 
      const json = await fetchJSON(API); 
      localStorage.setItem(STORAGE_KEY, JSON.stringify({t:Date.now(), data:json})); 
      paintAll(json, true); 
      setTimeout(poll, 5000); 
    }catch(e){ 
      const cached = localStorage.getItem(STORAGE_KEY); 
      if(cached){ try{ paintAll(JSON.parse(cached).data, false); }catch{} } 
      else{ setStatus(false); } 
      setTimeout(poll, 10000); 
    } 
  } 
  const cached = localStorage.getItem(STORAGE_KEY); 
  if(cached){ try{ paintAll(JSON.parse(cached).data, false); }catch{} } 
  let sparkRaf = 0; 
  window.addEventListener('resize', ()=>{ cancelAnimationFrame(sparkRaf); sparkRaf = requestAnimationFrame(()=> rows.forEach(r=>drawSpark(r.canvas, r.history))); }); 
  poll(); 
})(); 

(function(){ 
  const form = document.getElementById('a11yForm'); 
  if(!form) return; 
  const summary = document.getElementById('formSummary'); 
  const fields = [ 
    {el: form.name, err: document.getElementById('name-err'), test: v => /^[A-Za-zÀ-ÿ' -]{2,}$/.test(v)}, 
    {el: form.email, err: document.getElementById('email-err'), test: v => /\S+@\S+\.\S+/.test(v)}, 
    {el: form.message, err: document.getElementById('msg-err'), test: v => (v||'').trim().length >= 10}, 
  ]; 
  function validateField(f){ 
    const ok = f.test(f.el.value.trim()); 
    f.err.hidden = ok; 
    f.el.setAttribute('aria-invalid', ok ? 'false' : 'true'); 
    return ok; 
  } 
  fields.forEach(f => f.el.addEventListener('blur', () => validateField(f))); 
  form.addEventListener('submit', e=>{ 
    e.preventDefault(); 
    const bad = fields.filter(f => !validateField(f)); 
    if(bad.length){ 
      summary.textContent = `Please fix ${bad.length} field(s): ` + bad.map(f => f.el.labels[0].textContent).join(', ') + '.'; 
      bad[0].el.focus(); 
      return; 
    } 
    summary.textContent = '✅ Sent ! (demo)'; 
    form.reset(); 
    fields.forEach(f => { f.err.hidden = true; f.el.setAttribute('aria-invalid','false'); }); 
  }); 
})(); 
document.getElementById('y').textContent = new Date().getFullYear();

/* ✅ Drawer Menu Responsive (added) */
(function () {
  const toggle = document.querySelector('.nav-toggle');
  const drawer = document.getElementById('mobile-menu');
  if (!toggle || !drawer) return;

  const backdrop = drawer.querySelector('.drawer-backdrop');
  const closeBtns = drawer.querySelectorAll('[data-close]');
  const links = drawer.querySelectorAll('.drawer-nav a');

  function openDrawer() {
    drawer.hidden = false;
    requestAnimationFrame(() => drawer.classList.add('open'));
    document.body.classList.add('no-scroll');
    toggle.setAttribute('aria-expanded', 'true');
  }

  function closeDrawer() {
    drawer.classList.remove('open');
    document.body.classList.remove('no-scroll');
    toggle.setAttribute('aria-expanded', 'false');
    setTimeout(() => {
      drawer.hidden = true;
      toggle.focus();
    }, 250);
  }

  toggle.addEventListener('click', () => {
    const expanded = toggle.getAttribute('aria-expanded') === 'true';
    expanded ? closeDrawer() : openDrawer();
  });

  backdrop?.addEventListener('click', closeDrawer);
  closeBtns.forEach(b => b.addEventListener('click', closeDrawer));
  links.forEach(a => a.addEventListener('click', closeDrawer));

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && drawer.classList.contains('open')) closeDrawer();
  });
})();
